@page "/"
@rendermode InteractiveServer

<h3>Today</h3>
@if (habits is null || !habits.Any())
{
    <p>You don't have any habits! <a href="/habits">Go here</a> to add one now!</p>
} 
else 
{
    <div id="habit-list">
    @foreach(var habit in habits)
    {
        <div>
            <button 
                class="btn @(habit.Completed ? "btn-secondary" : "btn-primary")" 
                @onmouseup="(args) => ToggleCompleteHabit(args, habit)">
                @habit.Name
            </button>
        </div>
    }
    </div>
}
@code {
    private List<HabitToday>? habits { get; set; }
    Guid _UserId { get; set; }
    private Data.AppDbContext? _dbcontext;
    protected override async Task OnInitializedAsync()
    {
        _dbcontext = await DbFactory.CreateDbContextAsync();
        _UserId = await UserData.GetCurrentUserGuid(AuthenticationStateProvider);
        await RefreshData();

    }
    protected async Task ToggleCompleteHabit(MouseEventArgs args, Habit habit)
    {
        if (_dbcontext is not null)
        {
            IQueryable<Models.Action> dbCompleteRecordQuery = _dbcontext.Actions
                .Where(i =>
                    i.UserID == _UserId &&
                    i.Habit.Id == habit.Id &&
                    i.CreatedAt >= DateTime.Today.Date);

            Models.Action? Complete = await dbCompleteRecordQuery.FirstOrDefaultAsync();

            if (Complete is null) {
                var dbHabit = await _dbcontext.Habits.FirstOrDefaultAsync(i => i.Id == habit.Id);
                if (dbHabit is not null) {
                    _dbcontext.Actions.Add(new Models.Action(dbHabit));
                }
            }
            else {
                _dbcontext.Actions.Remove(Complete);
            }

            await _dbcontext.SaveChangesAsync();
            await RefreshData();
        }
    }
    protected async Task RefreshData()
    {
        if (_dbcontext == null) { return; }
        habits = await _dbcontext.Habits.Where(c => c.UserId == _UserId).Select(c => new HabitToday(c)).ToListAsync();
        Models.Action[] AlreadyCompleted = await _dbcontext.Actions
            .Where(i => i.UserID == _UserId && i.CreatedAt >= DateTime.Now.Date).ToArrayAsync();
        foreach (HabitToday habit in habits)
        {
            if (AlreadyCompleted.Any(i => i.Habit.Id == habit.Id)) { habit.Completed = true; }
        }
    }
}
